(function () {
	'use strict';

	/** @returns {void} */

	function run(fn) {
		return fn();
	}

	function blank_object() {
		return Object.create(null);
	}

	/**
	 * @param {Function[]} fns
	 * @returns {void}
	 */
	function run_all(fns) {
		fns.forEach(run);
	}

	let current_component;

	/** @returns {void} */
	function set_current_component(component) {
		current_component = component;
	}

	const ATTR_REGEX = /[&"]/g;
	const CONTENT_REGEX = /[&<]/g;

	/**
	 * Note: this method is performance sensitive and has been optimized
	 * https://github.com/sveltejs/svelte/pull/5701
	 * @param {unknown} value
	 * @returns {string}
	 */
	function escape(value, is_attr = false) {
		const str = String(value);
		const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;
		pattern.lastIndex = 0;
		let escaped = '';
		let last = 0;
		while (pattern.test(str)) {
			const i = pattern.lastIndex - 1;
			const ch = str[i];
			escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : ch === '"' ? '&quot;' : '&lt;');
			last = i + 1;
		}
		return escaped + str.substring(last);
	}

	let on_destroy;

	/** @returns {{ render: (props?: {}, { $$slots, context }?: { $$slots?: {}; context?: Map<any, any>; }) => { html: any; css: { code: string; map: any; }; head: string; }; $$render: (result: any, props: any, bindings: any, slots: any, context: any) => any; }} */
	function create_ssr_component(fn) {
		function $$render(result, props, bindings, slots, context) {
			const parent_component = current_component;
			const $$ = {
				on_destroy,
				context: new Map(context || (parent_component ? parent_component.$$.context : [])),
				// these will be immediately discarded
				on_mount: [],
				before_update: [],
				after_update: [],
				callbacks: blank_object()
			};
			set_current_component({ $$ });
			const html = fn(result, props, bindings, slots);
			set_current_component(parent_component);
			return html;
		}
		return {
			render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {
				on_destroy = [];
				const result = { title: '', head: '', css: new Set() };
				const html = $$render(result, props, {}, $$slots, context);
				run_all(on_destroy);
				return {
					html,
					css: {
						code: Array.from(result.css)
							.map((css) => css.code)
							.join('\n'),
						map: null // TODO
					},
					head: result.title + result.head
				};
			},
			$$render
		};
	}

	/** @returns {string} */
	function add_attribute(name, value, boolean) {
		if (value == null || (boolean && !value)) return '';
		const assignment = boolean && value === true ? '' : `="${escape(value, true)}"`;
		return ` ${name}${assignment}`;
	}

	/* webviews\components\HelloWorld.svelte generated by Svelte v4.2.12 */

	const HelloWorld = create_ssr_component(($$result, $$props, $$bindings, slots) => {
		let name = 'world';
		return `<input${add_attribute("value", name, 0)}> <h1>Hello ${escape(name)}!</h1>`;
	});

	const app = new HelloWorld({
	    target: document.body
	});

	return app;

})();
